<html lang="auto">
 <head>
  <meta http-equiv="X-Translated-By" content="Google">
  <meta http-equiv="X-Translated-To" content="zh-CN">
  <script type="text/javascript" src="https://www.gstatic.com/_/translate_http/_/js/k=translate_http.tr.zh_CN.VYDj-nYYJwk.O/d=1/rs=AN8SPfq4Fg0mdeehsroELRJoc51-OEMCyQ/m=ajaxproxy" data-sourceurl="http://dwm.suckless.org/patches/colorbar/dwm-colorbar-6.2.diff"></script>
  <meta name="robots" content="none">
 </head>
 <body>
  <script type="text/javascript" src="https://www.gstatic.com/_/translate_http/_/js/k=translate_http.tr.zh_CN.VYDj-nYYJwk.O/d=1/exm=ajaxproxy,el_conf/ed=1/rs=AN8SPfq4Fg0mdeehsroELRJoc51-OEMCyQ/m=navigationui" data-environment="prod" data-proxy-url="https://dwm-suckless-org.translate.goog" data-proxy-full-url="https://dwm-suckless-org.translate.goog/patches/colorbar/dwm-colorbar-6.2.diff?_x_tr_sl=auto&amp;_x_tr_tl=zh-CN&amp;_x_tr_hl=zh-CN&amp;_x_tr_sch=http" data-source-url="http://dwm.suckless.org/patches/colorbar/dwm-colorbar-6.2.diff" data-source-language="auto" data-target-language="zh-CN" data-display-language="zh-CN" data-detected-source-language="en" data-is-source-untranslated="false" data-source-untranslated-url="https://translate.google.com/website?sl=auto&amp;tl=zh-CN&amp;hl=zh-CN&amp;u=http://dwm.suckless.org/patches/colorbar/dwm-colorbar-6.2.diff&amp;anno=2"></script>
  <pre>diff --git a/config.def.h b/config.def.h
index 1c0b587..a516645 100644
--- a/config.def.h
+++ b/config.def.h
@@ -16,6 +16,11 @@ static const char *colors[][3]      = {
 	/*               fg         bg         border   */
 	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
 	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+	[SchemeStatus]  = { col_gray3, col_gray1,  "#000000"  }, // Statusbar right {text,background,not used but cannot be empty}
+	[SchemeTagsSel]  = { col_gray4, col_cyan,  "#000000"  }, // Tagbar left selected {text,background,not used but cannot be empty}
+    [SchemeTagsNorm]  = { col_gray3, col_gray1,  "#000000"  }, // Tagbar left unselected {text,background,not used but cannot be empty}
+    [SchemeInfoSel]  = { col_gray4, col_cyan,  "#000000"  }, // infobar middle  selected {text,background,not used but cannot be empty}
+    [SchemeInfoNorm]  = { col_gray3, col_gray1,  "#000000"  }, // infobar middle  unselected {text,background,not used but cannot be empty}
 };
 
 /* tagging */
diff --git a/dwm.c b/dwm.c
index 4465af1..0d1d2f7 100644
--- a/dwm.c
+++ b/dwm.c
@@ -59,7 +59,7 @@
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeStatus, SchemeTagsSel, SchemeTagsNorm, SchemeInfoSel, SchemeInfoNorm }; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -703,7 +703,7 @@ drawbar(Monitor *m)
 
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
-		drw_setscheme(drw, scheme[SchemeNorm]);
+		drw_setscheme(drw, scheme[SchemeStatus]);
 		sw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
 		drw_text(drw, m-&gt;ww - sw, 0, sw, bh, 0, stext, 0);
 	}
@@ -716,7 +716,7 @@ drawbar(Monitor *m)
 	x = 0;
 	for (i = 0; i &lt; LENGTH(tags); i++) {
 		w = TEXTW(tags[i]);
-		drw_setscheme(drw, scheme[m-&gt;tagset[m-&gt;seltags] &amp; 1 &lt;&lt; i ? SchemeSel : SchemeNorm]);
+		drw_setscheme(drw, scheme[m-&gt;tagset[m-&gt;seltags] &amp; 1 &lt;&lt; i ? SchemeTagsSel : SchemeTagsNorm]);
 		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg &amp; 1 &lt;&lt; i);
 		if (occ &amp; 1 &lt;&lt; i)
 			drw_rect(drw, x + boxs, boxs, boxw, boxw,
@@ -725,17 +725,17 @@ drawbar(Monitor *m)
 		x += w;
 	}
 	w = blw = TEXTW(m-&gt;ltsymbol);
-	drw_setscheme(drw, scheme[SchemeNorm]);
+	drw_setscheme(drw, scheme[SchemeTagsNorm]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m-&gt;ltsymbol, 0);
 
 	if ((w = m-&gt;ww - sw - x) &gt; bh) {
 		if (m-&gt;sel) {
-			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
+			drw_setscheme(drw, scheme[m == selmon ? SchemeInfoSel : SchemeInfoNorm]);
 			drw_text(drw, x, 0, w, bh, lrpad / 2, m-&gt;sel-&gt;name, 0);
 			if (m-&gt;sel-&gt;isfloating)
 				drw_rect(drw, x + boxs, boxs, boxw, boxw, m-&gt;sel-&gt;isfixed, 0);
 		} else {
-			drw_setscheme(drw, scheme[SchemeNorm]);
+			drw_setscheme(drw, scheme[SchemeInfoNorm]);
 			drw_rect(drw, x, 0, w, bh, 1, 1);
 		}
 	}
</pre>
  <script>function gtElInit() {var lib = new google.translate.TranslateService();lib.translatePage('en', 'zh-CN', function () {});}</script>
  <script src="https://translate.google.com/translate_a/element.js?cb=gtElInit&amp;hl=zh-CN&amp;client=wt" type="text/javascript"></script>
 </body>
</html>